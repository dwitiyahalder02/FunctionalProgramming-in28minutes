package functionalprogramming.structre;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.stream.Collectors;

class Course
{
	private String name;
	private String category;
	private int reviewScore;
	private int noOfStudents;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCategory() {
		return category;
	}
	public void setCategory(String category) {
		this.category = category;
	}
	public int getReviewScore() {
		return reviewScore;
	}
	public void setReviewScore(int reviewScore) {
		this.reviewScore = reviewScore;
	}
	public int getNoOfStudents() {
		return noOfStudents;
	}
	public void setNoOfStudents(int noOfStudents) {
		this.noOfStudents = noOfStudents;
	}
	public Course(String name, String category, int reviewScore, int noOfStudents) {
		super();
		this.name = name;
		this.category = category;
		this.reviewScore = reviewScore;
		this.noOfStudents = noOfStudents;
	}
	@Override
	public String toString() {
		return "Course [name=" + name + ", category=" + category + ", reviewScore=" + reviewScore + ", noOfStudents="
				+ noOfStudents + "]";
	}
	
}
public class FP07customClass {

	public static void main(String args[]) {
		ArrayList<Course> courses=new ArrayList<>();
		courses.add(new Course("java","Reading",20,200));
		courses.add(new Course("SpringBoot","Writing",30,300));
		courses.add(new Course("SpringDataJpa","story",50,900));
		courses.add(new Course("Microservices","micro",100,100));
		
		//allMatch
		//find if all the courses has review score greater than 90
		System.out.println(courses.stream().allMatch(course->course.getReviewScore()>90));
		

		//nonematch
		System.out.println(courses.stream().noneMatch(course->course.getReviewScore()>90));
		
		//anymatch
		System.out.println(courses.stream().anyMatch(course->course.getReviewScore()>90));
		
		//sorting by comparator
		Comparator<Course> comparingByNoOfStudentsIncreasing=Comparator.comparing(Course::getNoOfStudents);
		System.out.println(courses.stream().sorted(comparingByNoOfStudentsIncreasing).collect(Collectors.toList()));
		
		Comparator<Course> comparingByNoOfStudentsDecreasing=Comparator.comparing(Course::getNoOfStudents).reversed();
		System.out.println(courses.stream().sorted(comparingByNoOfStudentsDecreasing).collect(Collectors.toList()));
		
		
		System.out.println(courses.stream().
				sorted(comparingByNoOfStudentsDecreasing)
				.limit(2)
				.collect(Collectors.toList()));
	}
	
	  
	
}
